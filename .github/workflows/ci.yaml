name: CI

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
  pull_request: {}
  workflow_dispatch: {}

env:
  UP_API_TOKEN: ${{ secrets.UP_API_TOKEN }}
  UP_ROBOT_ID: ${{ secrets.UP_ROBOT_ID }}
  UP_ORG: ${{ secrets.UP_ORG }}

jobs:
  publish-image:
    name: Publish Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install up
        uses: upbound/action-up@v1
        with:
          skip-login: true

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Install yq
        uses: dcarbone/install-yq-action@v1
        with:
          version: v4.35.1

      - name: Login to xpkg with robot
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: xpkg.upbound.io
          username: ${{ env.UP_ROBOT_ID }}
          password: ${{ env.UP_API_TOKEN }}

      - name: Create working directory
        run: |
          mkdir -p controller-package
          cd controller-package

      - name: Build and Publish
        working-directory: controller-package
        if: env.UP_API_TOKEN != ''
        run: |
          # Load chart attributes
          source ../.chart-attributes
          cp ../crossplane.yaml .

          echo "Using CHART_VERSION: $CHART_VERSION"

          # Pull the chart
          helm pull $CHART_NAME --repo $REPO_URL --version $CHART_VERSION

          # Build resources
          mkdir helm
          mv $CHART_NAME-$CHART_VERSION.tgz helm/chart.tgz
          mkdir crds
          helm template $RELEASE_NAME helm/chart.tgz -n $RELEASE_NAME --include-crds --kube-version=1.25.0 | \
            yq e 'select(.kind == "CustomResourceDefinition")' - | \
            yq -s '("crds/" + .metadata.name + ".yaml")' -

          # List the structure for verification
          find . -type f | sort

          # Build artifact
          up xpkg build

          # Find artifact
          XPKG_FILENAME=$(find . -name "*.xpkg" -type f -printf "%f\n")

          # Publish artifact
          export CONTROLLER_NAME=$(printf '%s' "$GITHUB_REPOSITORY" | sed 's/.*\///')

          # Detect if running in a PR context
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            COMMIT_ID=$(echo "$GITHUB_SHA" | cut -c1-7)
            CHART_VERSION="${CHART_VERSION}-${COMMIT_ID}"
          fi

          up xpkg push xpkg.upbound.io/$UP_ORG/$CONTROLLER_NAME:$CHART_VERSION -f $XPKG_FILENAME

  run-e2e-tests:
    name: Run e2e Tests
    needs: publish-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install and login with up
        if: env.UP_API_TOKEN != '' && env.UP_ORG != ''
        uses: upbound/action-up@v1
        with:
          api-token: ${{ secrets.UP_API_TOKEN }}
          organization: ${{ secrets.UP_ORG }}
          channel: main
          # renovate: datasource=github-releases depName=upbound/up
          version: v0.39.0-8.gfb176095

      - name: Login to xpkg with robot
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: xpkg.upbound.io
          username: ${{ env.UP_ROBOT_ID }}
          password: ${{ env.UP_API_TOKEN }}

      - name: Build project
        run: up project build

      - name: Switch up context
        if: env.UP_API_TOKEN != '' && env.UP_ORG != ''
        run: up ctx ${{ secrets.UP_ORG }}/space-the-final-frontier/default

      - name: Run e2e tests
        if: env.UP_API_TOKEN != '' && env.UP_ORG != ''
        run: |
          # Attributes
          source .chart-attributes

          # Detect if running in a PR context
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            COMMIT_ID=$(echo "$GITHUB_SHA" | cut -c1-7)
            CHART_VERSION="${CHART_VERSION}-${COMMIT_ID}"
          fi

          UP_CHART_VERSION=$CHART_VERSION up test run tests/* --e2e
